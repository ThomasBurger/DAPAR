library(org.Hs.eg.db)
library("org.Hs.eg.db")
library(org.Hs.eg.db)
library(knitr)
library(installr)
install.packages("installr")
library(installr)
updateR()
install.packages("DAPAR")
source("https://bioconductor.org/biocLite.R")
biocLite("DAPAR")
library(DAPAR)
biocLite("DAPARdata")
install.packages("C:/Users/FC219170/Desktop/DAPAR_1.5.2.tar.gz", repos = NULL, type = "source")
install.packages("stringi")
biocLite("DAPAR")
library(DAPAR)
biocLite("DAPARdata")
library(DAPARdata)
sessionInfo()
install.packages("C:/Users/FC219170/Desktop/DAPAR_1.5.2.tar.gz", repos = NULL, type = "source")
sessionInfo()
sessionInfo()
library(DAPAR)
library(DAPARdata)
sessionInfo()
install.packages("C:/Users/FC219170/Desktop/DAPAR_1.5.2.tar.gz", repos = NULL, type = "source")
source("https://bioconductor.org/biocLite.R")
biocLite("DAPAR")
library(DAPAR)
sessionInfo()
biocLite("DAPARdata")
library(DAPARdata)
sessionInfo()
install.packages("C:/Users/FC219170/Desktop/MSnbase_1.19.22.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/FC219170/Desktop/MSnbase_1.19.22.zip", repos = NULL, type = "win.binary")
source("https://bioconductor.org/biocLite.R")
install.packages("C:/Users/FC219170/Desktop/DAPAR_1.5.2.tar.gz", repos = NULL, type = "source")
library(DAPAR)
library(DAPARdata)
sessionInfo()
sessionInfo()
getOption("repos")
?c
ll <- list(A = 1, c = "C")
ll
c(ll, d = list(1:3))
c(ll[[1]], d = list(1:3), ll[[2]])
?append
l1<- as.list(c(1,2,3,4,5))
l1
l2<- as.list(c(6,7,8,9,10))
l2
l3<- list(l1,l2)
l3
ll <- list(A = 1, c = "C")
append(ll,d=list(1:3), after=1)
log2(130310000)
log2(75039000
)
library(siggenes)
install.packages("C:/Users/FC219170/Desktop/siggenes_1.46.0.tar.gz", repos = NULL, type = "source")
detach(siggenes)
q()
sessionInfo()
library(siggenes)
sessionInfo()
getwd()
dir()
install.packages("RMassBank")
install.packages("RMassBankData")
install.packages("synapterdata")
library(Homo.sapiens)
library(TxDb.Hsapiens.UCSC.hg38.knownGene)
jpeg("test.jpg")
plot(1:10)
dev.off()
dir()
getwd()
getwd()
install.packages("../Desktop/AnnotationHub_2.6.4.tar.gz")
install.packages("C:/Users/FC219170/Desktop/AnnotationHub_2.6.4.tar.gz", repos = NULL, type = "source")
source("https://bioconductor.org/biocLite.R")
?BiocUpgrade
source("https://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
sessionInfo()
install.packages("../Desktop/AnnotationHub_2.6.4.tar.gz")
source("https://bioconductor.org/biocLite.R")
biocLite("AnnotationHub")
ah<-AnnotationHub()
library(AnnotationHub)
biocLite("installr")
library(installr)
installr()
library(interactiveDisplayBase)
?interactive
?interactiveDisplayBase
??interactiveDisplayBase
display()
library(clusterProfiler)
biocLite("clusterProfiler")
?bitr
x <- c("GPX3",  "GLRX",   "LBP",   "CRYAB", "DEFB1", "HCLS1",   "SOD2",   "HSPA2")
eg = bitr(x, fromType="SYMBOL", toType="ENTREZID", OrgDb="org.Hs.eg.db")
ls()
dir()
dir
dir()
dir()
install.packages("LEANR")
library(LEANR)
set.seed(123456)
data(g2)
str(g2)
is.matrix(g2)
is.data.frame(g2)
is.list(g2)
dim(g2)
length(g2)
data(CCM.pvals)
str(CCM.pvals)
str(CCM.pvals[[1]])
str(CCM.pvals[[2]])
str(CCM.pvals[[3]])
data(gene.annots)
str(gene.annots)
LEAN_results<-lapply(names(CCM.pvals),function(ccm){
run.lean(CCM.pvals[[ccm]], g2, n_reps = 10000, ncores = 3)
})
str(LEAN_results)
names(LEAN_results)<-names(CCM.pvals)
str(LEAN_results)
sign.genes<-lapply(LEAN_results,function(LEANres){
rownames(LEANres$restab[LEANres$restab[,'PLEAN']<=0.05,])
})
names(sign.genes)<-names(CCM.pvals)
all.sign<-intersect(intersect(sign.genes[[1]],sign.genes[[2]]),sign.genes[[3]])
print(gene.annots[all.sign,])
ls()
vwf.ls.info<-get.ls.info(all.sign[1],LEAN_results$CCM2)
str(vwf.ls.info)
head(vwf.ls.info)
dim(vwf.ls.info)
tail(vwf.ls.info)
vwf.ls.info
ls()
str(sort(vwf.ls.info, by=input.ps))
str(sort(vwf.ls.info, by="input.ps"))
vwf.ls.info[sort(vwf.ls.info, by="input.ps")]
str(vwf.ls.info[sort(vwf.ls.info, by="input.ps")])
str(vwf.ls.info[sort(vwf.ls.info, by="input.ps"),])
?sort
?sort
str(vwf.ls.info[order(vwf.ls.info, by="input.ps")])
str(vwf.ls.info[order(vwf.ls.info, by="input.ps"),])
str(vwf.ls.info[order(vwf.ls.info, by=input.ps"),])
)
)
""
str(vwf.ls.info[order(vwf.ls.info, by=input.ps),])
str(vwf.ls.info[order(vwf.ls.info, by="input.ps"),])
?order
str(vwf.ls.info[order(vwf.ls.info$input.ps),])
head(vwf.ls.info[order(vwf.ls.info$input.ps),])
vwf.ls.info[order(vwf.ls.info$input.ps),]
ls()
write.ls.to.sif(all.sign[1],LEAN_results$CCM2,'./VWF_subnetwork.sif')
getwd()
print(gene.annots[all.sign,])
length(gene.annots)
is.list(gene.annots)
iinstall.packages("clusterProfiler")
iinstall.packages(clusterProfiler)
install.packages("clusterProfiler")
install.packages(clusterProfiler)
install.packages("clusterProfiler")
library(limma)
source("https://bioconductor.org/biocLite.R")
biocLite()
library(AnnotationDbi)
install.packages("~/R/R-3.4.0/library/clusterProfiler_3.4.2.zip", repos = NULL, type = "win.binary")
library(clusterProfiler)
install.packages("DOSE")
library(DOSE)
biocLite("DOSE")
library(DOSE)
biocLite("limma")
install.packages("installr")
setInternet2(TRUE) # only for R versions older than 3.3.0
installr::updateR()
installr::updateR(T)
source("https://bioconductor.org/biocLite.R")
biocLite("limma")
biocLite()
biocLite("clusterProfiler")
biocLite("impute")
biocLite("DAPAR")
library(Prostar)
library(ProStaR)
biocLite("Prostar")
sessionInfo()
library(clusterProfiler)
sessionInfo()
library(limma)
library(DAPAR)
sessionInfo()
dir())
dir())
dir()
getwd()
sessionInfo()
library(clusterProfiler)
library(DOSE)
library(Rcpp)
install.packages("Rcpp")
library(DOSE)
library(tibble)
install.packages("tibble")
library(Rcpp)
library(clusterProfiler)
??"clusterProfiler"
?bitr
sessionInfo()
library(BiocInstaller)
useDevel()
library(clusterprofiler)
library(clusterProfiler)
library(limma)
library(DAPAR)
library(org.Hs.eg.db)
setwd("~/Git/DAPAR/R")
?bitr
library(org.Hs.eg.db)
columns(org.Hs.eg())
Date(org.Hs.eg.db)
select(Date, org.Hs.eg.db)
?org.Hs.eg.db
?select()
?select
species(org.Hs.eg.db)
data(org.Hs.eg.db)
date(org.Hs.eg.db)
Date(org.Hs.eg.db)
keys(org.Hs.eg.db)
keytypes(org.Hs.eg.db)
columns(org.Hs.eg.db)
setdiff(keytypes(org.Hs.eg.db), columns(org.Hs.eg.db))
length(keytypes(org.Hs.eg.db))
length(columns(org.Hs.eg.db))
?mapIds
str(keys(org.Hs.eg.db, keytype="ENTREZID"))
length(unique(keys(org.Hs.eg.db, keytype="ENTREZID")))
ex10<-keys(org.Hs.eg.db, keytype="ENTREZID")
ex10
ex10<-keys(org.Hs.eg.db, keytype="ENTREZID")[1:10]
ex10
mapIds(org.Hs.eg.db, keys=ex10, keytype="ENTREZID", column="UNIPROT")
mapIds(org.Hs.eg.db, keys=ex10, keytype="ENTREZID", column="UNIPROT", multiVals=F)
mapIds(org.Hs.eg.db, keys=ex10, keytype="ENTREZID", column="UNIPROT", multiVals="first")
mapIds(org.Hs.eg.db, keys=ex10, keytype="ENTREZID", column="UNIPROT", multiVals="list")
mapIds(org.Hs.eg.db, keys=ex10, keytype="ENTREZID", column="UNIPROT", multiVals="filter")
tot.UNIPROT<-keys(org.Hs.eg.db, keytype="UNIPROT")
universe.GENE<-keys(org.Hs.eg.db, keytype="ENTREZID")
str(universe.GENE)
length((universe.GENE))
library(oorg.Ag.eg.db)
library(org.Ag.eg.db)
Ag.eg.ENTREZID<-keys(org.Ag.eg.db, keytype="ENTREZID")
length(Ag.eg.ENTREZID)
length(unique(Ag.eg.ENTREZID))
library(org.Ag.tair.db)
library(org.At.tair.db)
At.tair.ENTREZID<-keys(org.At.tair.db, keytype="ENTREZID")
length(At.tair.ENTREZID)
?string
?substr
?strsplit
strsplit("org.Ag.eg.db", split=".")
strsplit("org.Ag.eg.db", split=".", fixed=TRUE)
strsplit("org.Ag.eg.db", split=".", fixed=TRUE)[[1]][2:3]
paste(strsplit("org.Ag.eg.db", split=".", fixed=TRUE)[[1]][2:3], ".")
paste(".", strsplit("org.Ag.eg.db", split=".", fixed=TRUE)[[1]][2:3])
?paste
paste(strsplit("org.Ag.eg.db", split=".", fixed=TRUE)[[1]][2:3], sep=".")
paste(c(strsplit("org.Ag.eg.db", split=".", fixed=TRUE)[[1]][2:3]), sep=".")
paste(strsplit("org.Ag.eg.db", split=".", fixed=TRUE)[[1]][2], strsplit("org.Ag.eg.db", split=".", fixed=TRUE)[[1]][3]  ,sep=".")
all.pkg<-c("org.Ag.eg.db","org.At.tair.db","org.Bt.eg.db","org.Ce.eg.db",
"org.CF.eg.db","org.Dm.eg.db","org.Dr.eg.db","org.EcK12.eg.db",
"org.EcSakai.eg.db","org.Gg.eg.db","org.Hs.eg.db","org.Mm.eg.db",
"org.Mmu.eg.db","org.Pf.plasmo.db","org.Pt.eg.db","org.Rn.eg.db",
"org.Sc.sgd.db","org.Ss.eg.db","org.Xl.eg.db")
all.pkg
for (i in 1:length(all.pkg)) {
#univ<-keys(all.pkg[i], keytype="ENTREZID")
tmp<-paste(strsplit(all.pkg[i], split=".", fixed=TRUE)[[1]][2],
strsplit(all.pkg[i], split=".", fixed=TRUE)[[1]][3],
sep=".")
paste("univ", tmp, sep=".")<-keys(all.pkg[i], keytype="ENTREZID")
}
i
keys(all.pkg[i], keytype="ENTREZID")
keys(org.At.tair.db, keytype="ENTREZID")
str(keys(org.At.tair.db, keytype=ENTREZID))
str(keys("org.At.tair.db", keytype="ENTREZID"))
?keys
z<-c(org.Ag.eg.db,org.At.tair.db)
z
all.pkg<-c(org.Ag.eg.db,org.At.tair.db,org.Bt.eg.db,org.Ce.eg.db,
org.CF.eg.db,org.Dm.eg.db,org.Dr.eg.db,org.EcK12.eg.db,
org.EcSakai.eg.db,org.Gg.eg.db,org.Hs.eg.db,org.Mm.eg.db,
org.Mmu.eg.db,org.Pf.plasmo.db,org.Pt.eg.db,org.Rn.eg.db,
org.Sc.sgd.db,org.Ss.eg.db,org.Xl.eg.db)
install.packages('org.Bt.eg.db')
source("https://bioconductor.org/biocLite.R")
biocLite("org.Bt.eg.db")
all.pkg<-c(org.Ag.eg.db,org.At.tair.db,org.Bt.eg.db,org.Ce.eg.db,
org.CF.eg.db,org.Dm.eg.db,org.Dr.eg.db,org.EcK12.eg.db,
org.EcSakai.eg.db,org.Gg.eg.db,org.Hs.eg.db,org.Mm.eg.db,
org.Mmu.eg.db,org.Pf.plasmo.db,org.Pt.eg.db,org.Rn.eg.db,
org.Sc.sgd.db,org.Ss.eg.db,org.Xl.eg.db)
all.pkg<-c(org.Ag.eg.db,org.At.tair.db,org.Bt.eg.db,org.Ce.eg.db,
org.CF.eg.db,org.Dm.eg.db,org.Dr.eg.db,org.EcK12.eg.db,
org.EcSakai.eg.db,org.Gg.eg.db,org.Hs.eg.db,org.Mm.eg.db,
org.Mmu.eg.db,org.Pf.plasmo.db,org.Pt.eg.db,org.Rn.eg.db,
org.Sc.sgd.db,org.Ss.eg.db,org.Xl.eg.db)
library(org.Bt.eg.db)
all.pkg<-c(org.Ag.eg.db,org.At.tair.db,org.Bt.eg.db,org.Ce.eg.db,
org.CF.eg.db,org.Dm.eg.db,org.Dr.eg.db,org.EcK12.eg.db,
org.EcSakai.eg.db,org.Gg.eg.db,org.Hs.eg.db,org.Mm.eg.db,
org.Mmu.eg.db,org.Pf.plasmo.db,org.Pt.eg.db,org.Rn.eg.db,
org.Sc.sgd.db,org.Ss.eg.db,org.Xl.eg.db)
library(org.Ce.eg.db)
biocLite("org.Ce.eg.db")
biocLite(c("org.CF.eg.db","org.Dm.eg.db","org.Dr.eg.db","org.EcK12.eg.db",
"org.EcSakai.eg.db","org.Gg.eg.db","org.Hs.eg.db","org.Mm.eg.db",
"org.Mmu.eg.db","org.Pf.plasmo.db","org.Pt.eg.db","org.Rn.eg.db",
"org.Sc.sgd.db","org.Ss.eg.db","org.Xl.eg.db"))
biocLite("org.Cf.eg.db")
all.pkg<-c(org.Ag.eg.db,org.At.tair.db,org.Bt.eg.db,org.Ce.eg.db,
org.Cf.eg.db,org.Dm.eg.db,org.Dr.eg.db,org.EcK12.eg.db,
org.EcSakai.eg.db,org.Gg.eg.db,org.Hs.eg.db,org.Mm.eg.db,
org.Mmu.eg.db,org.Pf.plasmo.db,org.Pt.eg.db,org.Rn.eg.db,
org.Sc.sgd.db,org.Ss.eg.db,org.Xl.eg.db)
library(org.Ag.eg.db,org.At.tair.db,org.Bt.eg.db,org.Ce.eg.db,
+            org.Cf.eg.db,org.Dm.eg.db,org.Dr.eg.db,org.EcK12.eg.db,
+            org.EcSakai.eg.db,org.Gg.eg.db,org.Hs.eg.db,org.Mm.eg.db,
+            org.Mmu.eg.db,org.Pf.plasmo.db,org.Pt.eg.db,org.Rn.eg.db,
+            org.Sc.sgd.db,org.Ss.eg.db,org.Xl.eg.db)
library(c(org.Ag.eg.db,org.At.tair.db,org.Bt.eg.db,org.Ce.eg.db,
+            org.Cf.eg.db,org.Dm.eg.db,org.Dr.eg.db,org.EcK12.eg.db,
+            org.EcSakai.eg.db,org.Gg.eg.db,org.Hs.eg.db,org.Mm.eg.db,
+            org.Mmu.eg.db,org.Pf.plasmo.db,org.Pt.eg.db,org.Rn.eg.db,
+            org.Sc.sgd.db,org.Ss.eg.db,org.Xl.eg.db))
library(org.Bt.eg.db)
library(org.Ce.eg.db)
library(org.Cf.eg.db)
library(org.Dm.eg.db)
library(org.Dr.eg.db)
library(org.EcK12.eg.db)
library(org.EcSakai.eg.db)
library(org.Gg.eg.db)
library(org.Mm.eg.db)
library(org.Mmu.eg.db)
library(org.Pf.plasmo.db)
library(org.Pt.eg.db)
library(org.Rn.eg.db)
library(org.Sc.sgd.db)
library(org.Ss.eg.db)
library(org.Xl.eg.db)
for (i in 1:length(all.pkg)) {
#univ<-keys(all.pkg[i], keytype="ENTREZID")
tmp<-paste(strsplit(all.pkg[i], split=".", fixed=TRUE)[[1]][2],
strsplit(all.pkg[i], split=".", fixed=TRUE)[[1]][3],
sep=".")
paste("univ", tmp, sep=".")<-keys(all.pkg[i], keytype="ENTREZID")
}
i
str(keys(all.pkg[i], keytype="ENTREZID"))
str(keys(all.pkg[i], keytype=ENTREZID))
all.pkg[i]
all.pkg
str(all.pkg)
z<-c(org.Ag.eg.db,org.At.tair.db)
z
z[1]
all.pkg
z<-c(org.Ag.eg.db,org.At.tair.db)
z
all.pkg<-c(org.Ag.eg.db,org.At.tair.db,org.Bt.eg.db,org.Ce.eg.db,
org.Cf.eg.db,org.Dm.eg.db,org.Dr.eg.db,org.EcK12.eg.db,
org.EcSakai.eg.db,org.Gg.eg.db,org.Hs.eg.db,org.Mm.eg.db,
org.Mmu.eg.db,org.Pf.plasmo.db,org.Pt.eg.db,org.Rn.eg.db,
org.Sc.sgd.db,org.Ss.eg.db,org.Xl.eg.db)
all.pkg
all.pkg[1]
str(keys(org.Ag.eg.db, keytype="ENTREZID"))
str(keys(all.pkg[1], keytype="ENTREZID"))
all.pkg<-c(org.Ag.eg.db,org.At.tair.db,org.Bt.eg.db,org.Ce.eg.db,
org.Cf.eg.db,org.Dm.eg.db,org.Dr.eg.db,org.EcK12.eg.db,
org.EcSakai.eg.db,org.Gg.eg.db,org.Hs.eg.db,org.Mm.eg.db,
org.Mmu.eg.db,org.Pf.plasmo.db,org.Pt.eg.db,org.Rn.eg.db,
org.Sc.sgd.db,org.Ss.eg.db,org.Xl.eg.db)
all.pkg[1]
all.pkg[1][[1]]
packageName(all.pkg[1])
?packageName
AnnotationDb(all.pkg[1])
as.is(all.pkg[1])
all.pkg<-list(org.Ag.eg.db,org.At.tair.db,org.Bt.eg.db,org.Ce.eg.db)
strall.pkg
str(all.pkg)
str(keys(org.Ag.eg.db, keytype="ENTREZID"))
str(keys("org.Ag.eg.db", keytype="ENTREZID"))
str(keys("org.Ag.eg", keytype="ENTREZID"))
str(keys(get(all.pkg[i]), keytype="ENTREZID"))
all.pkg<-c("org.Ag.eg.db","org.At.tair.db")
str(keys(get(all.pkg[i]), keytype="ENTREZID"))
org.Ag.eg.db
getDBSCHEMA(org.Ag.eg.db)
dbconn(hgu95av2.db)
dbconn(org.Ag.eg.db)
org.HS.eg_dbInfo()
org.Hs.eg_dbInfo()
str(org.Hs.eg_dbInfo())
head(org.Hs.eg_dbInfo())
org.Hs.eg_dbInfo()[1,]
org.Hs.eg_dbInfo()[14,]
org.Hs.eg_dbInfo()[GOSOURCEDATE,]
org.Hs.eg_dbInfo()["GOSOURCEDATE",]
org.Hs.eg_dbInfo()[14,]
str(org.Hs.eg_dbInfo()[14,])
str(org.Hs.eg_dbInfo()$value)
str(org.Hs.eg_dbInfo$value)
org.Hs.eg_dbInfo()[14,2]
org.Hs.eg_dbInfo()$name[14]
org.Hs.eg_dbInfo()$value[14]
org.Mm.eg_dbInfo()$value[14]
org.Ag.eg_dbInfo()$value[14]
org.Ag.eg_dbInfo()
org.At.tair_dbInfo()$value[14]
org.At.tair_dbInfo()$value
org.At.tair_dbInfo()
str(org.At.tair_dbInfo())
org.At.tair_dbInfo()["GOSOURCEDATE",]
org.At.tair_dbInfo("GOSOURCEDATE")
org.At.tair_dbInfo(GOSOURCEDATE)
dbGetQuery(org.Mm.eg_dbInfo(), "SELECT * FROM GOSOURCEDATE")
dbGetQuery(org.Mm.eg_dbInfo())
org.At.tair_dbInfo()$name
str(org.At.tair_dbInfo()$name)
str(org.At.tair_dbInfo())
str(org.At.tair_dbInfo()$name=="GOSOURCEDATE")
org.At.tair_dbInfo()$name=="GOSOURCEDATE"
as.data.frame(org.At.tair_dbInfo())
as.data.frame(org.At.tair_dbInfo())[1,]
str(org.At.tair_dbInfo()["GOSOURCEDATE",])
str(org.At.tair_dbInfo()$name=="GOSOURCEDATE"
)
which(org.At.tair_dbInfo()$name=="GOSOURCEDATE")==TRUE
?dbInfo
dbInfo(org.At.tair_db)
dbInfo(org.At.tair.db)
dbInfo(org.At.tair)
dbmeta(org.At.tair_dbconn(), "GOSOURCEDATE")
dbmeta(org.Ag.eg_dbconn(), "GOSOURCEDATE")
dbmeta(org.Bt.eg_dbconn(), "GOSOURCEDATE")
dbmeta(org.Ce.eg_dbconn(), "GOSOURCEDATE")
dbmeta(org.Cf.eg_dbconn(), "GOSOURCEDATE")
dbmeta(org.CDm.eg_dbconn(), "GOSOURCEDATE")
dbmeta(org.Dm.eg_dbconn(), "GOSOURCEDATE")
dbmeta(org.Sc.sgd_dbconn(), "GOSOURCEDATE")
org.At.tair_dbInfo()
dbmeta(org.At.tair_dbconn(), "GOSOURCEURL")
dbmeta(org.At.tair_dbconn(), "Species")
dbmeta(org.At.tair_dbconn(), "SPECIES")
dbmeta(org.At.tair_dbconn(), "CENTRALID")
dbmeta(org.Hs.eg_dbconn(), "CENTRALID")
org.Hs.eg_dbInfo()
org.Dm.eg_dbInfo()
dbmeta(org.Dm.eg_dbconn(), "CENTRALID")
dbmeta(org.Dr.eg_dbconn(), "CENTRALID")
dbmeta(org.EcK12.eg_dbconn(), "CENTRALID")
dbmeta(org.EcSakai.eg_dbconn(), "CENTRALID")
dbmeta(org.Gg.eg_dbconn(), "CENTRALID")
?`dbmeta,AnnDbObj-method`
dbschema(org.Hs.eg.db)
dbschema(org.Hs.eg)
library(AnnotationDbi)
dbschema(org.Hs.eg)
dbschema(org.Hs.eg.db)
org.Hs.eg_dbInfo()
sessionInfo()
library(BiocParallel)
install.packages(BiocParallel)
install.packages("BiocParallel")
install.packages("BiocParallel")
install.packages("~/R/R-3.4.1/library/BiocParallel_1.10.1.zip", repos = NULL, type = "win.binary")
