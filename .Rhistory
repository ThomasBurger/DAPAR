nb.cond=length(levels(Condition))
r=aggreg.column.design(design,Condition)
label.agg=r[[1]]
nb.agg=r[[2]]
k=1
contra=rep(0,sum(1:(nb.cond-1)))
for (i in 1:(nb.cond-1)){
for (j in (i+1):nb.cond){
contra[k]=c(paste("(",label.agg[i],")/",
nb.agg[i],"-(",label.agg[j],")/",
nb.agg[j]))
k=k+1
}
}
return(contra)
}
make.contraste.2.1=function(design,Condition){
nb.cond=length(levels(Condition))
r=aggreg.column.design(design,Condition)
label.agg=r[[1]]
nb.agg=r[[2]]
k=1
#contra=rep(0,sum(1:(nb.cond-1)))
contra=rep(0,nb.cond)
for (i in 1:(nb.cond)){
contra[k]=c(paste("(",label.agg[i],")/",nb.agg[i]))
nb=sum(nb.agg[(1:nb.cond)[(1:nb.cond)!=i]])
for (j in (1:nb.cond)[(1:nb.cond)!=i]){
contra[k]=c(paste(contra[k],"-(",label.agg[j],")/",nb))
}
k=k+1
}
return(contra)
}
Contrast <- 1
Conditions <- factor(Conditions)
RepBio <- factor(RepBio)
RepTech <- factor(RepTech)
lt=length(qData[1,])
lc=length(Conditions)
lb=length(RepBio)
lte=length(RepTech)
conds
conds <- Conditions
Conditions <- conds
Conditions <- factor(Conditions)
RepBio <- factor(RepBio)
RepTech <- factor(RepTech)
lt=length(qData[1,])
lc=length(Conditions)
lb=length(RepBio)
lte=length(RepTech)
#Check the correct length of vectors
if (length(levels(Conditions))!=lc){
if(lt==lc){
if (lb==lc){
if (lte==lc){
#CHeck if the number of factors in Conditions is less than
#the one in Bio.Rep, itself must
#be less than tech.Rep
if (length(levels(Conditions))<=length(levels(RepBio))){
if (length(levels(RepBio))<=length(levels(RepTech))){
#Get the number of hierarchical levels
if (length(levels(RepBio))==lt){niveau=1;}
else{
if (length(levels(RepTech))==lt){niveau=2;}
else{
if (length(levels(RepTech))==length(levels(RepBio))){niveau=2;}
else { niveau=3;}
}
}
#Non hierarchical case (only one type of replicate)
if (niveau==1){
nb_cond=length(levels(Conditions))
#CGet the number of replicates per condition
nb_Rep=rep(0,nb_cond)
for (i in 1:nb_cond){
nb_Rep[i]=sum((Conditions==levels(Conditions)[i]))
}
#####################
#Compute the design matrix
design=matrix(0,lt,nb_cond)
n0=1
coln=NULL
for (j in 1:nb_cond){
coln=c(coln,paste("Condition",j,collapse=NULL,sep=""))
design[(n0:(n0+nb_Rep[j]-1)),j]=rep(1,length((n0:(n0+nb_Rep[j]-1))))
n0=n0+nb_Rep[j]
}
colnames(design)=coln
#####################
#Compute the contrast matrices
if (Contrast==1){contra=make.contraste.1.1(design,Condition=Conditions);}
if (Contrast==2){contra=make.contraste.2.1(design,Condition=Conditions);}
cmtx=makeContrasts(contrasts=contra,levels=make.names(colnames(design)))
fit=eBayes(contrasts.fit(lmFit(qData, design), cmtx))
# return(fit)
}
if (niveau==2){
#####################
#Compute the design matrix
design=make.design.2(qData,Condition=Conditions,RepBio=RepBio)
#####################
#Compute the contrast matrices
if (Contrast==1){
contra=make.contraste.1.1(design,Condition=Conditions);}
if (Contrast==2){
contra=make.contraste.2.1(design,Condition=Conditions);}
cmtx=makeContrasts(contrasts=contra,levels=make.names(colnames(design)))
fit <- eBayes(contrasts.fit(lmFit(qData, design), cmtx))
#return(fit)
}
if (niveau==3){
#####################
#Compute the design matrix
design=make.design.3(qData,Condition=Conditions,RepBio=RepBio,RepTech=RepTech)
#####################
#Compute the contrast matrices
if (Contrast==1){
contra=make.contraste.1.1(design,Condition=Conditions);}
if (Contrast==2){
contra=make.contraste.2.1(design,Condition=Conditions);}
cmtx=makeContrasts(contrasts=contra,levels=make.names(colnames(design)))
fit <- eBayes(contrasts.fit(lmFit(qData, design), cmtx))
#return(fit)
}
}else{cat("Problem: the number of factors in Bio.Rep has to be less or equal to the number of factor in tech.Rep.!\n")}
}else{cat("Problem: the number of factors in Conditions has to be less or equal to the number of factor in bio.Rep.!\n")}
}else{cat("Problem: the length of the vector tech.Rep must be equal to the length of the vector bio.Rep!\n")}
}else{cat("Problem: the length of the vector bio.Rep must be equal to the length of the vector Conditions!\n")}
}else{cat("Problem: the length of the vector Conditions must be equal to the length of the input matrix!\n")}
}else{cat("Problem: the factor-vector Conditions must contain several replicates in each condition  !\n")}
str(fit)
diffAna.res <- topTable(fit,
coef = 2,
sort.by = "none",
number=nrow(qData))
str(diffAna.res)
res.tmp <- topTable(fit,number=Inf, sort.by="none")
str(res.tmp)
res <- cbind(res.tmp[,1:Compa.Nb], fit$p.value)
Compa.Nb <- dim(fit$p.value)[2]
res <- cbind(res.tmp[,1:Compa.Nb], fit$p.value)
str(res)
cn<-c()
for (i in 1:Compa.Nb){
#not the same syntax to pars if Contast=1 or Contrast=2
if(Contrast==1){
compa <- stringr::str_match_all(colnames(fit$p.value)[i],"[[:space:]]Condition([[:digit:]]+)")[[1]]
cn[i] <- paste(levels(Conditions)[as.numeric(compa[1,2])], "_vs_",levels(Conditions)[as.numeric(compa[2,2])], sep="")
}
if(Contrast==2){
#hierarchic only
#compa<-str_match_all(colnames(fit$p.value)[i], "[[:space:]]Condition([[:digit:]]+)[[:space:]]")[[1]]
#cn[i]<-paste(levels(Conditions)[as.numeric(compa[1,2])], "vs(all-",levels(Conditions)[as.numeric(compa[1,2])], ")", sep="")
#hier and non hier
compa<-str_match_all(colnames(fit$p.value)[i], "[[:space:]]Condition([[:digit:]]+)")[[1]]
cn[i]<-paste(levels(Conditions)[as.numeric(compa[1,2])], "_vs_(all-",levels(Conditions)[as.numeric(compa[1,2])], ")", sep="")
}
}
res.l <- list(
FC = as.data.frame(res[,1:Compa.Nb]),
P_Value = as.data.frame(res[,-(1:Compa.Nb)] )
)
str(res.l)
colnames(res.l$FC) <- paste(cn, "FC",sep="_")
colnames(res.l$P_Value) <- paste(cn, "pval",sep="_")
str(res.l)
str(toto)
#Check the correct length of vectors
if (length(levels(Conditions))!=lc){
if(lt==lc){
if (lb==lc){
if (lte==lc){
#CHeck if the number of factors in Conditions is less than
#the one in Bio.Rep, itself must
#be less than tech.Rep
if (length(levels(Conditions))<=length(levels(RepBio))){
if (length(levels(RepBio))<=length(levels(RepTech))){
#Get the number of hierarchical levels
if (length(levels(RepBio))==lt){niveau=1;}
else{
if (length(levels(RepTech))==lt){niveau=2;}
else{
if (length(levels(RepTech))==length(levels(RepBio))){niveau=2;}
else { niveau=3;}
}
}
#Non hierarchical case (only one type of replicate)
if (niveau==1){
nb_cond=length(levels(Conditions))
#CGet the number of replicates per condition
nb_Rep=rep(0,nb_cond)
for (i in 1:nb_cond){
nb_Rep[i]=sum((Conditions==levels(Conditions)[i]))
}
#####################
#Compute the design matrix
design=matrix(0,lt,nb_cond)
n0=1
coln=NULL
for (j in 1:nb_cond){
coln=c(coln,paste("Condition",j,collapse=NULL,sep=""))
design[(n0:(n0+nb_Rep[j]-1)),j]=rep(1,length((n0:(n0+nb_Rep[j]-1))))
n0=n0+nb_Rep[j]
}
colnames(design)=coln
#####################
#Compute the contrast matrices
if (Contrast==1){contra=make.contraste.1.1(design,Condition=Conditions);}
if (Contrast==2){contra=make.contraste.2.1(design,Condition=Conditions);}
cmtx=makeContrasts(contrasts=contra,levels=make.names(colnames(design)))
fit=eBayes(contrasts.fit(lmFit(qData, design), cmtx))
# return(fit)
}
if (niveau==2){
#####################
#Compute the design matrix
design=make.design.2(qData,Condition=Conditions,RepBio=RepBio)
#####################
#Compute the contrast matrices
if (Contrast==1){
contra=make.contraste.1.1(design,Condition=Conditions);}
if (Contrast==2){
contra=make.contraste.2.1(design,Condition=Conditions);}
cmtx=makeContrasts(contrasts=contra,levels=make.names(colnames(design)))
fit <- eBayes(contrasts.fit(lmFit(qData, design), cmtx))
#return(fit)
}
if (niveau==3){
#####################
#Compute the design matrix
design=make.design.3(qData,Condition=Conditions,RepBio=RepBio,RepTech=RepTech)
#####################
#Compute the contrast matrices
if (Contrast==1){
contra=make.contraste.1.1(design,Condition=Conditions);}
if (Contrast==2){
contra=make.contraste.2.1(design,Condition=Conditions);}
cmtx=makeContrasts(contrasts=contra,levels=make.names(colnames(design)))
fit <- eBayes(contrasts.fit(lmFit(qData, design), cmtx))
#return(fit)
}
}else{cat("Problem: the number of factors in Bio.Rep has to be less or equal to the number of factor in tech.Rep.!\n")}
}else{cat("Problem: the number of factors in Conditions has to be less or equal to the number of factor in bio.Rep.!\n")}
}else{cat("Problem: the length of the vector tech.Rep must be equal to the length of the vector bio.Rep!\n")}
}else{cat("Problem: the length of the vector bio.Rep must be equal to the length of the vector Conditions!\n")}
}else{cat("Problem: the length of the vector Conditions must be equal to the length of the input matrix!\n")}
}else{cat("Problem: the factor-vector Conditions must contain several replicates in each condition  !\n")}
res.tmp <- topTable(fit,number=Inf, sort.by="none")
str(res.tmp)
Compa.Nb <- dim(fit$p.value)[2]
test <- compute.t.tests(exprs(obj), Biobase::pData(obj)[,"Label"])
str(test)
pData(obj)
str(fit)
shiny::runApp('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp')
runApp('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp')
installed.packages(lib.loc = Prostar.loc)["Prostar","Version"]
obj <- readRDS("/Users/sw175264/Desktop/__Wilson_2.MSnset")
obj@experimentData@other$Prostar_Version
PROSTAR.version <- rv$current.obj@experimentData@other$Prostar_Version
PROSTAR.version <- obj@experimentData@other$Prostar_Version
PROSTAR.version
library(DAPAR)
DAPAR::check.design(Biobase::pData(obj))
shiny::runApp('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp')
runApp('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp')
shiny::runApp('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp')
runApp('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp')
rv$current.obj
rv$resAnaDiff
rv$res_AllPairwiseComparisons
runApp('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp')
rv$current.obj@experimentData@other$Params[["anaDiff"]]
params <- rv$current.obj@experimentData@other$Params[["anaDiff"]]
rv$res_AllPairwiseComparisons <- list(FC = as.data.frame(Biobase::fData(rv$current.obj)[,params$AllPairwiseCompNames$FC]),
P_Value = as.data.frame(Biobase::fData(rv$current.obj)[,params$AllPairwiseCompNames$P_Value],
col.names=rv$current.obj@experimentData@other$Params[["anaDiff"]]$AllPairwiseCompNames$P_Value)
)
str(rv$res_AllPairwiseComparisons)
colnames(rv$res_AllPairwiseComparisons$FC)<-rv$current.obj@experimentData@other$Params[["anaDiff"]]$AllPairwiseCompNames$FC
colnames(rv$res_AllPairwiseComparisons$P_Value)<-rv$current.obj@experimentData@other$Params[["anaDiff"]]$AllPairwiseCompNames$P_Value
str(rv$res_AllPairwiseComparisons)
rv$current.obj@experimentData@other$Params[["anaDiff"]]$AllPairwiseCompNames$FC
colnames(rv$res_AllPairwiseComparisons$FC)
rv$current.obj@experimentData@other$Params[["anaDiff"]]$AllPairwiseCompNames$P_Value
colnames(rv$res_AllPairwiseComparisons$P_Value)<-rv$current.obj@experimentData@other$Params[["anaDiff"]]$AllPairwiseCompNames$P_Value
colnames(rv$res_AllPairwiseComparisons$P_Value)
colnames(rv$res_AllPairwiseComparisons$FC)<-rv$current.obj@experimentData@other$Params[["anaDiff"]]$AllPairwiseCompNames$FC
str(rv$res_AllPairwiseComparisons)
rv$current.obj@experimentData@other$Params[["anaDiff"]]$AllPairwiseCompNames$FC
rv$listNomsComparaison <-rv$current.obj@experimentData@other$Params[["anaDiff"]]$AllPairwiseCompNames$FC
rv$res_AllPairwiseComparisons <- list(FC = as.data.frame(Biobase::fData(rv$current.obj)[,params$AllPairwiseCompNames$FC]),
P_Value = as.data.frame(Biobase::fData(rv$current.obj)[,params$AllPairwiseCompNames$P_Value],
col.names=rv$current.obj@experimentData@other$Params[["anaDiff"]]$AllPairwiseCompNames$P_Value)
)
str(rv$res_AllPairwiseComparisons)
as.data.frame(Biobase::fData(rv$current.obj)[,params$AllPairwiseCompNames$FC]col.names=rv$current.obj@experimentData@other$Params[["anaDiff"]]$AllPairwiseCompNames$FC)
test <- as.data.frame(Biobase::fData(rv$current.obj)[,params$AllPairwiseCompNames$FC],col.names=rv$current.obj@experimentData@other$Params[["anaDiff"]]$AllPairwiseCompNames$FC)
str(test)
data.frame(Biobase::fData(rv$current.obj)[,params$AllPairwiseCompNames$FC],col.names=rv$current.obj@experimentData@other$Params[["anaDiff"]]$AllPairwiseCompNames$FC)
data.frame(Biobase::fData(rv$current.obj)[,params$AllPairwiseCompNames$FC],colnames=rv$current.obj@experimentData@other$Params[["anaDiff"]]$AllPairwiseCompNames$FC)
as.data.frame(1:8, col.names = "toto")
obj <- readRDS("/Users/sw175264/Desktop/__Wilson_2.MSnset")
qData <- Biobase::exprs(obj)
sTab <- Biobase::pData(obj)
comp.type="OnevsOne"
contrast <- 1
conds <- factor(sTab$Label, ordered = TRUE)
res.l <- NULL
design.matrix <- make.design(sTab)
contra <- make.contrast(design.matrix,condition=conds, contrast)
cmtx=makeContrasts(contrasts=contra,levels=make.names(colnames(design.matrix)))
fit <- eBayes(contrasts.fit(lmFit(qData, design.matrix), cmtx))
res <- cbind(fit$coefficients, fit$p.value)
#how many comparisons have been done (and thus how many columns of pval)
Compa.Nb <- dim(fit$p.value)[2]
#empty colnames vector
cn<-c()
for (i in 1:Compa.Nb){
#not the same syntax to pars if Contast=1 or Contrast=2
if(contrast==1){
compa <- stringr::str_match_all(colnames(fit$p.value)[i],"[[:space:]]Condition([[:digit:]]+)")[[1]]
cn[i] <- paste(unique(conds)[as.numeric(compa[1,2])], "_vs_",unique(conds)[as.numeric(compa[2,2])], sep="")
}
if(contrast==2){
#hierarchic only
#compa<-str_match_all(colnames(fit$p.value)[i], "[[:space:]]Condition([[:digit:]]+)[[:space:]]")[[1]]
#cn[i]<-paste(levels(Conditions)[as.numeric(compa[1,2])], "vs(all-",levels(Conditions)[as.numeric(compa[1,2])], ")", sep="")
#hier and non hier
compa<-str_match_all(colnames(fit$p.value)[i], "[[:space:]]Condition([[:digit:]]+)")[[1]]
cn[i]<-paste(unique(conds)[as.numeric(compa[1,2])], "_vs_(all-",unique(conds)[as.numeric(compa[1,2])], ")", sep="")
}
}
library(limma)
contra <- make.contrast(design.matrix,condition=conds, contrast)
cmtx=makeContrasts(contrasts=contra,levels=make.names(colnames(design.matrix)))
fit <- eBayes(contrasts.fit(lmFit(qData, design.matrix), cmtx))
res <- cbind(fit$coefficients, fit$p.value)
#how many comparisons have been done (and thus how many columns of pval)
Compa.Nb <- dim(fit$p.value)[2]
#empty colnames vector
cn<-c()
for (i in 1:Compa.Nb){
#not the same syntax to pars if Contast=1 or Contrast=2
if(contrast==1){
compa <- stringr::str_match_all(colnames(fit$p.value)[i],"[[:space:]]Condition([[:digit:]]+)")[[1]]
cn[i] <- paste(unique(conds)[as.numeric(compa[1,2])], "_vs_",unique(conds)[as.numeric(compa[2,2])], sep="")
}
if(contrast==2){
#hierarchic only
#compa<-str_match_all(colnames(fit$p.value)[i], "[[:space:]]Condition([[:digit:]]+)[[:space:]]")[[1]]
#cn[i]<-paste(levels(Conditions)[as.numeric(compa[1,2])], "vs(all-",levels(Conditions)[as.numeric(compa[1,2])], ")", sep="")
#hier and non hier
compa<-str_match_all(colnames(fit$p.value)[i], "[[:space:]]Condition([[:digit:]]+)")[[1]]
cn[i]<-paste(unique(conds)[as.numeric(compa[1,2])], "_vs_(all-",unique(conds)[as.numeric(compa[1,2])], ")", sep="")
}
}
res.l <- list(
FC = as.data.frame(res[,1:Compa.Nb]),
P_Value = as.data.frame(res[,-(1:Compa.Nb)] )
)
str(res.l)
colnames(res.l$FC) <- paste(cn, "FC",sep="_")
colnames(res.l$P_Value) <- paste(cn, "pval",sep="_")
str(res.l)
source('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp/server/srv_anaDiff.R')
source('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp/server/srv_anaDiff.R')
head(res.l$FC)
head(res.l[["FC"]])
source('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp/server/srv_anaDiff.R')
source('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp/server/srv_anaDiff.R')
source('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp/server/srv_anaDiff.R')
runApp('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp')
runApp('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp')
debugSource('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp/server/srv_anaDiff.R')
source('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp/server/srv_anaDiff.R')
runApp('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp')
source('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp/server/srv_anaDiff.R')
runApp('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp')
as.data.frame(a=1:8, col.names = "toto")
as.data.frame(a=c(1:8), col.names = "toto")
as.data.frame(a=1:8, col.names = "toto")
as.data.frame(1:8, col.names = "toto")
setNames(data.frame(1:8, c("name"))
)
setNames(data.frame(matrix(ncol = 3, nrow = 0)), c("name", "age", "gender"))
toto <- 1:8
setNames(as.data.frame(FC=toto),c("toto"))
?setNames
setNames(data.frame(FC=toto),c("toto"))
source('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp/server/srv_anaDiff.R')
source('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp/server/srv_anaDiff.R')
source('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp/server/srv_anaDiff.R')
source('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp/server/srv_anaDiff.R')
source('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp/server/srv_anaDiff.R')
source('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp/server/srv_anaDiff.R')
source('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp/server/srv_anaDiff.R')
runApp('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp')
source('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp/server/srv_anaDiff.R')
runApp('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp')
source('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp/server/srv_anaDiff.R')
runApp('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp')
runApp('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp')
source('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp/server/srv_anaDiff.R')
runApp('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp')
runApp('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp')
source('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp/server/srv_anaDiff.R')
source('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp/server/srv_anaDiff.R')
runApp('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp')
source('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp/server/srv_anaDiff.R')
source('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp/server/srv_anaDiff.R')
source('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp/server/srv_anaDiff.R')
source('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp/server/srv_anaDiff.R')
source('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp/server/srv_anaDiff.R')
source('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp/server/srv_anaDiff.R')
runApp('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp')
source('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp/server/srv_anaDiff.R')
source('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp/server/srv_anaDiff.R')
runApp('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp')
source('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp/server/srv_anaDiff.R')
source('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp/server/srv_anaDiff.R')
runApp('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp')
runApp('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp')
install.packages(c("bit", "callr", "data.table", "dplyr", "geeM", "ggforce", "ggrepel", "highr", "httpuv", "lambda.r", "later", "MASS", "mgcv", "modelr", "munsell", "mvtnorm", "openxlsx", "packrat", "pillar", "processx", "purrr", "rmarkdown", "rvcheck", "shinyAce", "stringi", "survival", "tidyr", "tm", "units", "utf8", "xfun", "zoo"))
install.packages(c("bit", "callr", "data.table", "dplyr", "geeM", "ggforce", "ggrepel", "highr", "httpuv", "lambda.r", "later", "MASS", "mgcv", "modelr", "munsell", "mvtnorm", "openxlsx", "packrat", "pillar", "processx", "purrr", "rmarkdown", "rvcheck", "shinyAce", "stringi", "survival", "tidyr", "tm", "units", "utf8", "xfun", "zoo"))
install.packages(c("bit", "callr", "data.table", "dplyr", "geeM", "ggforce", "ggrepel", "highr", "httpuv", "lambda.r", "later", "MASS", "mgcv", "modelr", "munsell", "mvtnorm", "openxlsx", "packrat", "pillar", "processx", "purrr", "rmarkdown", "rvcheck", "shinyAce", "stringi", "survival", "tidyr", "tm", "units", "utf8", "xfun", "zoo"))
install.packages(c("bit", "callr", "data.table", "dplyr", "geeM", "ggforce", "ggrepel", "highr", "httpuv", "lambda.r", "later", "MASS", "mgcv", "modelr", "munsell", "mvtnorm", "openxlsx", "packrat", "pillar", "processx", "purrr", "rmarkdown", "rvcheck", "shinyAce", "stringi", "survival", "tidyr", "tm", "units", "utf8", "xfun", "zoo"))
install.packages(c("bit", "callr", "data.table", "dplyr", "geeM", "ggforce", "ggrepel", "highr", "httpuv", "lambda.r", "later", "MASS", "mgcv", "modelr", "munsell", "mvtnorm", "openxlsx", "packrat", "pillar", "processx", "purrr", "rmarkdown", "rvcheck", "shinyAce", "stringi", "survival", "tidyr", "tm", "units", "utf8", "xfun", "zoo"))
system("ssh shiny@gre046180 'ls'", wait=FALSE)
shiny::runApp('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp')
system("ssh shiny@gre046180 'ls'", wait=FALSE)
system("ssh shiny@gre046180 'ls'", wait=FALSE)
library(DAPAR)
wrapper.dapar.impute.mi
obj <- readRDS("/Users/sw175264/Desktop/_MSnSet_Test/Bio vend 13h45.MSnset")
wrapper.dapar.impute.mi(obj)
nb.iter = 3
conditions <- as.factor(Biobase::pData(obj)$Label)
repbio <- as.factor(Biobase::pData(obj)$Bio.Rep)
reptech <-as.factor(Biobase::pData(obj)$Tech.Rep)
tab <- Biobase::exprs(obj)
conditions
repbio
reptech
pData(obj)
pData(obj) <- cbind(pData(obj), Bio.Rep=1:8)
pData(obj)
wrapper.dapar.impute.mi(obj)
shiny::runApp('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp')
runApp('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp')
runApp('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp')
runApp('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp')
rv$current.obj@experimentData@other$Prostar_Version
runApp()
runApp('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp')
runApp('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp')
runApp('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp')
runApp('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp')
runApp('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp')
runApp('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp')
runApp('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp')
runApp('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp')
runApp('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp')
runApp('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp')
runApp('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp')
runApp('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp')
runApp('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp')
rv$hot
rv$hot
rv$hot
runApp()
runApp('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp')
rv$hot
runApp('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp')
rv$hot
rv$designChecked
rv$hot
rv$hot
runApp()
runApp('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp')
runApp('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp')
runApp('/Volumes/Data/Projets/KDD-Tools/Github/Prostar/inst/ProstarApp')
library(highcharter)
library(tidyverse)
require(DAPARdata)
data(Exp1_R25_pept)
obj <- Exp1_R25_pept[1:1000]
keepThat <- mvFilterGetIndices(obj, 'wholeMatrix', ncol(obj))
obj <- mvFilterFromIndices(obj, keepThat)
qData <- Biobase::exprs(obj)
sTab <- Biobase::pData(obj)
data <- limmaCompleteTest(qData,sTab)
df <- data.frame(x=data$FC, y = -log10(data$P_Value),index = as.character(rownames(obj)))
colnames(df) <- c("x", "y", "index")
tooltipSlot <- c("Sequence", "Score")
df <- cbind(df,Biobase::fData(obj)[tooltipSlot])
colnames(df) <- gsub(".", "_", colnames(df), fixed=TRUE)
if (ncol(df) > 3){
colnames(df)[4:ncol(df)] <-
paste("tooltip_", colnames(df)[4:ncol(df)], sep="")}
hc_clickFunction <- JS("function(event) {
Shiny.onInputChange('eventPointClicked', [this.index]);}")
cond <- c("25fmol", "10fmol")
diffAnaVolcanoplot_rCharts(df, 2.5, 1, cond,hc_clickFunction)
df <- data.frame(x=data$FC, y = -log10(data$P_Value),index = as.character(rownames(obj)))
head(df)
colnames(df) <- c("x", "y", "index")
head(df)
setwd("/Volumes/Data/Projets/KDD-Tools/Github/DAPAR")
roxygen2::roxygenize()
