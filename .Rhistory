source('~/Projets/Github/Prostar/inst/ProstarApp/server/srv_ModulesSrv.R')
source('~/Projets/Github/Prostar/inst/ProstarApp/server/srv_ModulesSrv.R')
source('~/Projets/Github/Prostar/inst/ProstarApp/server/srv_ModulesSrv.R')
source('~/Projets/Github/Prostar/inst/ProstarApp/server/srv_ModulesSrv.R')
source('~/Projets/Github/Prostar/inst/ProstarApp/server/srv_ModulesSrv.R')
runApp('Projets/Github/Prostar/inst/ProstarApp')
source('~/Projets/Github/Prostar/inst/ProstarApp/server/srv_ModulesSrv.R')
runApp('Projets/Github/Prostar/inst/ProstarApp')
source('Projets/Github/Prostar/inst/ProstarApp/run.R')
runApp('Projets/Github/Prostar/inst/ProstarApp')
runApp('Projets/Github/Prostar/inst/ProstarApp')
runApp('Projets/Github/Prostar/inst/ProstarApp')
runApp('Projets/Github/Prostar/inst/ProstarApp')
runApp('Projets/Github/Prostar/inst/ProstarApp')
devtools::install_github('rstudio/DT')
devtools::install_github('jbkunst/highcharter')
runApp('Projets/Github/Prostar/inst/ProstarApp')
runApp('Projets/Github/Prostar/inst/ProstarApp')
shiny::runApp('Projets/Github/Prostar/inst/ProstarApp')
remove.packages("DT", lib="~/R/win-library/3.5")
remove.packages("highcharter", lib="~/R/win-library/3.5")
devtools::install_github('rstudio/DT')
devtools::install_github('jbkunst/highcharter')
devtools::install_github('rstudio/DT')
install.packages('DT')
install.packages("DT")
devtools::install_github('rstudio/DT')
shiny::runApp('Projets/Github/Prostar/inst/ProstarApp')
18*30
getPercentile <- function(name) {
soft <- getBiocStats("soft")
ann <- getBiocStats("annotation")
exp <- getBiocStats("exp")
total <- rbind(soft, ann, exp)
ii <- order(total$dlstat, decreasing = TRUE)
orderedTotal <- total[ii,]
per <- round(100 * which(orderedTotal$name == name) / nrow(orderedTotal), digits=0)
return (per)
}
getBiocStats <- function(type){
switch(type,
soft = {
url <- 'https://www.bioconductor.org/packages/stats/'
n <- 88},
annotation = {
url <- 'https://www.bioconductor.org/packages/stats/data-annotation.html'
n <- 99},
exp = {
url <- 'https://www.bioconductor.org/packages/stats/data-experiment.html'
n <- 99})
x = readLines(url)
x <- x[-(1:which( unlist(gregexpr("All",x))>1)[1])]
mypattern = '<TR class=\"pkg_index\">'
datalines = grep(mypattern,x,value=TRUE)
t <- substring(datalines,n)
pkgName <- unlist(lapply(t, function(x) {substring(x, 1, (unlist(gregexpr(pattern ='/',x))[1]-1))}))
stat <- unlist(lapply(datalines, function(x) {substring(x,
unlist(gregexpr(pattern =';',x))[2]+2,
(unlist(gregexpr(pattern ='</A>',x))[1]-2))}))
df_stat <- data.frame(name = pkgName, dlstat = stat)
return(df_stat)
}
getPercentile("Prostar")
runApp('Projets/Github/Prostar/inst/ProstarApp')
shiny::runApp('Projets/Github/Prostar/inst/ProstarApp')
shiny::runApp('GitHub/Prostar/inst/ProstarApp')
runApp('GitHub/Prostar/inst/ProstarApp')
runApp('GitHub/Prostar/inst/ProstarApp')
runApp('GitHub/Prostar/inst/ProstarApp')
runApp('GitHub/Prostar/inst/ProstarApp')
runApp('GitHub/Prostar/inst/ProstarApp')
runApp('GitHub/Prostar/inst/ProstarApp')
runApp('GitHub/Prostar/inst/ProstarApp')
obj <- readRDS("../Downloads/Bio vend 13h45.MSnset")
library(DAPAR)
wrapper.dapar.impute.mi(obj, 3)
wrapper.dapar.impute.mi(obj, 10)
pData(obj)
cmd <- "ssh shiny@gre046180 'ls'"
system(cmd)
cmd <- "ssh shiny@gre046180"
system(cmd)
cmd <- "ssh shiny@gre046180"
system(cmd)
cmd <- "ssh shiny@gre046180"
system(cmd)
cmd <- "ssh shiny@gre046180 'ls'"
system(cmd)
cmd <- "ssh shiny@gre046180 'ls'"
system(cmd, wait=FALSE)
setwd("~/GitHub/DAPARdata/data")
Exp1_R25_pept <- load("Exp1_R25_pept.RData")
colnames(Biobase:pData(Exp1_R25_pept))[1:2] <-c("Sample.name", "Condition")
library(MSnbase)
colnames(Biobase:pData(Exp1_R25_pept))[1:2] <-c("Sample.name", "Condition")
colnames(Biobase::pData(Exp1_R25_pept))[1:2] <-c("Sample.name", "Condition")
Exp1_R25_pept <- data("Exp1_R25_pept.RData")
colnames(Biobase::pData(Exp1_R25_pept))[1:2] <-c("Sample.name", "Condition")
library(DAPARdata)
data("Exp1_R25_pept.RData")
data("Exp1_R25_pept")
Exp1_R25_pept
Exp1_R25_pept@experimentData@other$DAPAR_Version
colnames(Biobase::pData(Exp1_R25_pept))[1:2] <-c("Sample.name", "Condition")
save(Exp1_R25_pept, file="Exp1_R25_pept.RData")
pData(Exp1_R25_pept)
Exp1_R25_prot <- data("Exp1_R25_prot")
colnames(Biobase::pData(Exp1_R25_prot))[1:2] <-c("Sample.name", "Condition")
save(Exp1_R25_prot, file="Exp1_R25_prot.RData")
data("Exp1_R25_prot")
colnames(Biobase::pData(Exp1_R25_prot))[1:2] <-c("Sample.name", "Condition")
save(Exp1_R25_prot, file="Exp1_R25_prot.RData")
data("Exp1_R2_pept")
colnames(Biobase::pData(Exp1_R2_pept))[1:2] <-c("Sample.name", "Condition")
save(Exp1_R2_pept, file="Exp1_R2_pept.RData")
data("Exp1_R2_prot")
colnames(Biobase::pData(Exp1_R2_prot))[1:2] <-c("Sample.name", "Condition")
save(Exp1_R2_prot, file="Exp1_R2_prot.RData")
data("Exp2_R100_pept")
colnames(Biobase::pData(Exp2_R100_pept))[1:2] <-c("Sample.name", "Condition")
save(Exp2_R100_pept, file="Exp2_R100_pept.RData")
data("Exp2_R100_prot")
colnames(Biobase::pData(Exp2_R100_prot))[1:2] <-c("Sample.name", "Condition")
save(Exp2_R100_prot, file="Exp2_R100_prot.RData")
data("Exp2_R10_pept")
colnames(Biobase::pData(Exp2_R10_pept))[1:2] <-c("Sample.name", "Condition")
save(Exp2_R10_pept, file="Exp2_R10_pept.RData")
data("Exp2_R10_prot")
colnames(Biobase::pData(Exp2_R10_prot))[1:2] <-c("Sample.name", "Condition")
save(Exp2_R10_prot, file="Exp2_R10_prot.RData")
data("Exp2_R2_pept")
colnames(Biobase::pData(Exp2_R2_pept))[1:2] <-c("Sample.name", "Condition")
save(Exp2_R2_pept, file="Exp2_R2_pept.RData")
data("Exp2_R2_prot")
colnames(Biobase::pData(Exp2_R2_prot))[1:2] <-c("Sample.name", "Condition")
save(Exp2_R2_prot, file="Exp2_R2_prot.RData")
rename <- function(filename) {
obj <- readRDS(filename)
colnames(Biobase::pData(obj)[1:2]) <- c("Sample.name", "Condition")
saveRDS(obj, file=filename)
}
rename("Exp1_R25_pept.RData")
rename("Exp1_R25_prot.RData")
rename("Exp1_R2_pept.RData")
rename("Exp1_R2_prot.RData")
rename("Exp2_R100_pept.RData")
rename("Exp2_R100_prot.RData")
rename("Exp2_R10_pept.RData")
rename("Exp2_R10_prot.RData")
rename("Exp2_R2_pept.RData")
rename("Exp2_R2_prot.RData")
load("Exp1_R2_pept")
rename <- function(filename) {
obj <- get(filename)
colnames(Biobase::pData(obj)[1:2]) <- c("Sample.name", "Condition")
saveRDS(obj, file=filename)
}
rename("Exp1_R25_pept.RData")
rename("Exp1_R25_pept")
rename <- function(filename) {
obj <- get(filename)
colnames(Biobase::pData(obj)[1:2]) <- c("Sample.name", "Condition")
saveRDS(obj, file=paste0(filename,".MSnset")
}
rename <- function(filename) {
obj <- get(filename)
colnames(Biobase::pData(obj)[1:2]) <- c("Sample.name", "Condition")
saveRDS(obj, file=paste0(filename,".MSnset"))
}
rename("Exp1_R25_pept")
getwd()
setwd("~/GitHub/DAPARdata/inst/extdata")
rename("Exp1_R25_pept")
rename("Exp1_R25_prot")
rename("Exp1_R2_pept")
rename("Exp1_R2_prot")
rename("Exp2_R100_pept")
rename("Exp2_R100_prot")
rename("Exp2_R10_pept")
rename("Exp2_R10_prot")
rename("Exp2_R2_pept")
rename("Exp2_R2_prot")
install.packages("~/GitHub/DAPARdata_1.11.1.tar.gz", repos = NULL, type = "source")
setwd("~/GitHub/DAPAR")
roxygen2::roxygenize()
install.packages("~/GitHub/DAPAR_1.13.1.tar.gz", repos = NULL, type = "source")
shiny::runApp('~/GitHub/Prostar/inst/ProstarApp')
obj<-readRDS("../../../Downloads/__WilsonOK.MSnset")
obj@experimentData@other$Prostar_Version
DAPAR::check.design(Biobase::pData(obj))
pData(obj)
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
server <- function(input, output) {
output$plot <- renderPlot({
input$goPlot # Re-run when button is clicked
dat <- data.frame(x = rnorm(10), y = rnorm(10))
withProgress(message = 'Making plot', value = 1, {
Sys.sleep(20)
})
plot(dat$x, dat$y)
})
}
ui <- shinyUI(basicPage(
tags$head(tags$style(HTML("
.progress-striped .bar {
background-color: #149bdf;
background-image: -webkit-gradient(linear, 0 100%, 100% 0, color-stop(0.25, rgba(255, 255, 255, 0.6)), color-stop(0.25, transparent), color-stop(0.5, transparent), color-stop(0.5, rgba(255, 255, 255, 0.6)), color-stop(0.75, rgba(255, 255, 255, 0.6)), color-stop(0.75, transparent), to(transparent));
background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.6) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.6) 50%, rgba(255, 255, 255, 0.6) 75%, transparent 75%, transparent);
background-image: -moz-linear-gradient(45deg, rgba(255, 255, 255, 0.6) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.6) 50%, rgba(255, 255, 255, 0.6) 75%, transparent 75%, transparent);
background-image: -o-linear-gradient(45deg, rgba(255, 255, 255, 0.6) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.6) 50%, rgba(255, 255, 255, 0.6) 75%, transparent 75%, transparent);
background-image: linear-gradient(45deg, rgba(255, 255, 255, 0.6) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.6) 50%, rgba(255, 255, 255, 0.6) 75%, transparent 75%, transparent);
-webkit-background-size: 40px 40px;
-moz-background-size: 40px 40px;
-o-background-size: 40px 40px;
background-size: 40px 40px;
}
"))),
plotOutput('plot', width = "300px", height = "300px"),
actionButton('goPlot', 'Go plot')
))
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$plot <- renderPlot({
input$goPlot # Re-run when button is clicked
dat <- data.frame(x = rnorm(10), y = rnorm(10))
withProgress(message = 'Making plot', value = 1, { })
plot(dat$x, dat$y)
})
}
ui <- shinyUI(basicPage(
tags$head(tags$style(HTML("
.progress-striped .bar {
background-color: #149bdf;
background-image: -webkit-gradient(linear, 0 100%, 100% 0, color-stop(0.25, rgba(255, 255, 255, 0.6)), color-stop(0.25, transparent), color-stop(0.5, transparent), color-stop(0.5, rgba(255, 255, 255, 0.6)), color-stop(0.75, rgba(255, 255, 255, 0.6)), color-stop(0.75, transparent), to(transparent));
background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.6) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.6) 50%, rgba(255, 255, 255, 0.6) 75%, transparent 75%, transparent);
background-image: -moz-linear-gradient(45deg, rgba(255, 255, 255, 0.6) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.6) 50%, rgba(255, 255, 255, 0.6) 75%, transparent 75%, transparent);
background-image: -o-linear-gradient(45deg, rgba(255, 255, 255, 0.6) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.6) 50%, rgba(255, 255, 255, 0.6) 75%, transparent 75%, transparent);
background-image: linear-gradient(45deg, rgba(255, 255, 255, 0.6) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.6) 50%, rgba(255, 255, 255, 0.6) 75%, transparent 75%, transparent);
-webkit-background-size: 40px 40px;
-moz-background-size: 40px 40px;
-o-background-size: 40px 40px;
background-size: 40px 40px;
}
"))),
plotOutput('plot', width = "300px", height = "300px"),
actionButton('goPlot', 'Go plot')
))
shinyApp(ui = ui, server = server)
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
server <- function(input, output) {
output$plot <- renderPlot({
input$goPlot # Re-run when button is clicked
dat <- data.frame(x = rnorm(10), y = rnorm(10))
#withProgress(message = 'Making plot', value = 1, { })
plot(dat$x, dat$y)
})
}
ui <- shinyUI(basicPage(
withProgress(message = 'Runing GSVA', value = 50, {
incProgress(1, detail = "This may take a while...")
plotOutput('plot', width = "300px", height = "300px")
})
,
actionButton('goPlot', 'Go plot')
))
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$plot <- renderPlot({
input$goPlot # Re-run when button is clicked
dat <- data.frame(x = rnorm(1000), y = rnorm(1000))
#withProgress(message = 'Making plot', value = 1, { })
plot(dat$x, dat$y)
})
}
ui <- shinyUI(basicPage(
withProgress(message = 'Runing GSVA', value = 50, {
incProgress(1, detail = "This may take a while...")
plotOutput('plot', width = "300px", height = "300px")
})
,
actionButton('goPlot', 'Go plot')
))
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$plot <- renderPlot({
input$goPlot # Re-run when button is clicked
dat <- data.frame(x = rnorm(1000), y = rnorm(1000))
#withProgress(message = 'Making plot', value = 1, { })
plot(dat$x, dat$y)
})
}
ui <- shinyUI(basicPage(
withProgress(message = 'Runing GSVA', value = 50, {
wait(1)
plotOutput('plot', width = "300px", height = "300px")
})
,
actionButton('goPlot', 'Go plot')
))
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$plot <- renderPlot({
input$goPlot # Re-run when button is clicked
dat <- data.frame(x = rnorm(1000), y = rnorm(1000))
sleep(5)
#withProgress(message = 'Making plot', value = 1, { })
plot(dat$x, dat$y)
})
}
ui <- shinyUI(basicPage(
withProgress(message = 'Runing GSVA', value = 50, {
plotOutput('plot', width = "300px", height = "300px")
})
,
actionButton('goPlot', 'Go plot')
))
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$plot <- renderPlot({
input$goPlot # Re-run when button is clicked
dat <- data.frame(x = rnorm(1000), y = rnorm(1000))
Sys.sleep(5)
#withProgress(message = 'Making plot', value = 1, { })
plot(dat$x, dat$y)
})
}
ui <- shinyUI(basicPage(
withProgress(message = 'Runing GSVA', value = 50, {
plotOutput('plot', width = "300px", height = "300px")
})
,
actionButton('goPlot', 'Go plot')
))
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$plot <- renderPlot({
input$goPlot # Re-run when button is clicked
withProgress(message = 'Runing GSVA', value = 50, {
dat <- data.frame(x = rnorm(1000), y = rnorm(1000))
Sys.sleep(5)
#withProgress(message = 'Making plot', value = 1, { })
plot(dat$x, dat$y)
})
})
}
ui <- shinyUI(basicPage(
plotOutput('plot', width = "300px", height = "300px")
,
actionButton('goPlot', 'Go plot')
))
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$plot <- renderPlot({
input$goPlot # Re-run when button is clicked
withProgress(message = 'Runing GSVA', value = 100, {
dat <- data.frame(x = rnorm(1000), y = rnorm(1000))
Sys.sleep(5)
#withProgress(message = 'Making plot', value = 1, { })
plot(dat$x, dat$y)
})
})
}
ui <- shinyUI(basicPage(
plotOutput('plot', width = "300px", height = "300px")
,
actionButton('goPlot', 'Go plot')
))
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$plot <- renderPlot({
input$goPlot # Re-run when button is clicked
withProgress(message = 'Runing GSVA', min=100, value = 100, {
dat <- data.frame(x = rnorm(1000), y = rnorm(1000))
Sys.sleep(5)
#withProgress(message = 'Making plot', value = 1, { })
plot(dat$x, dat$y)
})
})
}
ui <- shinyUI(basicPage(
plotOutput('plot', width = "300px", height = "300px")
,
actionButton('goPlot', 'Go plot')
))
shinyApp(ui = ui, server = server)
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
options(shiny.stacktrace=TRUE)
runApp('~/GitHub/Prostar/inst/ProstarApp')
options(shiny.trace = TRUE)
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
options(shiny.trace = F)
data(Exp1_R25_pept)
conds <- Biobase::pData(Exp1_R25_pept)[,"Condition"]
wrapper.densityPlotD_HC(Exp1_R25_pept, conds)
qData <- Biobase::exprs(Exp1_R25_pept)
conds <- lab2Show <- Biobase::pData(Exp1_R25_pept)[,"Condition"]
densityPlotD_HC(qData, conds)
indData2Show=NULL
densityPlotD_HC(qData, conds,group2Color = "Condition")
densityPlotD_HC(qData, conds,group2Color = "Replicate")
runApp('~/GitHub/Prostar/inst/ProstarApp')
obj
paste(Biobase::pData(rv$current.obj)[,"Condition"],
Biobase::pData(rv$current.obj)[,"Bio.Rep"],
sep= "_")
paste(Biobase::pData(obj)[,"Condition"],
Biobase::pData(obj)[,"Bio.Rep"],
sep= "_")
pData(obj)
paste(Biobase::pData(obj)[,"Label"],
Biobase::pData(obj)[,"Bio.Rep"],
sep= "_")
paste(Biobase::pData(obj)[,"Label"],
Biobase::pData(obj)[,"Bio.Rep"],
sep= "_")
collapse(Biobase::pData(obj), sep='_')
apply(pData(obj), 1, collapse)
apply(pData(obj), 1, paste0)
apply(pData(obj), 1, paste0(x))
apply(pData(obj), 1, function(x){paste0(x, sep='_')})
paste0(pData(obj)[1,])
paste0(pData(obj)[1,], sep='_')
collaspe(pData(obj)[1,], sep='_')
collapse(pData(obj)[1,], sep='_')
paste(pData(obj)[1,], sep='_')
paste(x, collapse="--")
paste(pData(obj)[1,], collapse="_")
apply(pData(obj), 1, function(x){paste0(x, collapse='_')})
runApp('~/GitHub/Prostar/inst/ProstarApp')
toto <- paste(Biobase::pData(obj)[,"Label"],
Biobase::pData(obj)[,"Bio.Rep"],
sep= "_")
str(toto)
tutu <- apply(pData(obj), 1, function(x){paste0(x, collapse='_')})
str(tutu)
unlist(tutu)
str(unlist(tutu))
source('~/GitHub/Prostar/inst/ProstarApp/server/srv_modulesSrv.R')
names(tutu) <- NULL
str(tutu)
source('~/GitHub/Prostar/inst/ProstarApp/server/srv_modulesSrv.R')
runApp('~/GitHub/Prostar/inst/ProstarApp')
source('~/GitHub/Prostar/inst/ProstarApp/server/srv_modulesSrv.R')
source('~/GitHub/Prostar/inst/ProstarApp/server/srv_modulesSrv.R')
runApp('~/GitHub/Prostar/inst/ProstarApp')
source('~/GitHub/Prostar/inst/ProstarApp/server/srv_modulesSrv.R')
source('~/GitHub/Prostar/inst/ProstarApp/server/srv_modulesSrv.R')
source('~/GitHub/Prostar/inst/ProstarApp/server/srv_modulesSrv.R')
source('~/GitHub/Prostar/inst/ProstarApp/server/srv_modulesSrv.R')
runApp('~/GitHub/Prostar/inst/ProstarApp')
source('~/GitHub/Prostar/inst/ProstarApp/server/srv_modulesSrv.R')
source('~/GitHub/Prostar/inst/ProstarApp/server/srv_modulesSrv.R')
options(shiny.trace = TRUE)
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
source('~/GitHub/Prostar/inst/ProstarApp/server/srv_modulesSrv.R')
runApp('~/GitHub/Prostar/inst/ProstarApp')
options(shiny.trace = F)
source('~/GitHub/Prostar/inst/ProstarApp/server/srv_modulesSrv.R')
runApp('~/GitHub/Prostar/inst/ProstarApp')
source('~/GitHub/Prostar/inst/ProstarApp/server/srv_modulesSrv.R')
source('~/GitHub/Prostar/inst/ProstarApp/server/srv_modulesSrv.R')
runApp('~/GitHub/Prostar/inst/ProstarApp')
source('~/GitHub/Prostar/inst/ProstarApp/server/srv_modulesSrv.R')
runApp('~/GitHub/Prostar/inst/ProstarApp')
source('~/GitHub/Prostar/inst/ProstarApp/server/srv_modulesSrv.R')
runApp('~/GitHub/Prostar/inst/ProstarApp')
source('~/GitHub/Prostar/inst/ProstarApp/server/srv_modulesSrv.R')
source('~/GitHub/Prostar/inst/ProstarApp/server/srv_modulesSrv.R')
runApp('~/GitHub/Prostar/inst/ProstarApp')
source('~/GitHub/Prostar/inst/ProstarApp/server/srv_modulesSrv.R')
source('~/GitHub/Prostar/inst/ProstarApp/server/srv_modulesSrv.R')
