% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plots_compare_Norm.R
\name{compareNormalizationD_HC}
\alias{compareNormalizationD_HC}
\title{Builds a plot from a dataframe. Same as compareNormalizationD but 
uses the library \code{highcharter}}
\usage{
compareNormalizationD_HC(
  qDataBefore,
  qDataAfter,
  conds = NULL,
  palette = NULL,
  subset.view = NULL,
  n = 100,
  type = "scatter"
)
}
\arguments{
\item{qDataBefore}{A dataframe that contains quantitative data before 
normalization.}

\item{qDataAfter}{A dataframe that contains quantitative data after 
normalization.}

\item{conds}{A vector of the conditions (one condition 
per sample).}

\item{palette}{xxx}

\item{subset.view}{xxx}

\item{n}{An integer that is equal to the maximum number of displayed points. 
This number must be less or equal to the size 
of the dataset. If it is less than it, it is a random selection}

\item{type}{scatter or line}
}
\value{
A plot
}
\description{
#' Plot to compare the quantitative proteomics data before and after 
#' normalization
#' 
#' @title Builds a plot from a dataframe
#' 
#' @param qDataBefore A dataframe that contains quantitative data before 
#' normalization.
#' 
#' @param qDataAfter A dataframe that contains quantitative data after 
#' normalization.
#' 
#' @param condsForLegend A vector of the conditions (one condition 
#' per sample).
#' 
#' @param indData2Show A vector of the indices of the columns to show in 
#' the plot. The indices are those of indices of 
#' the columns int the data.frame qDataBefore.
#' 
#' @param palette xxx
#' 
#' @return A plot
#' 
#' @author Samuel Wieczorek
#' 
#' @examples
#' utils::data(Exp1_R25_pept, package='DAPARdata')
#' qDataBefore <- Biobase::exprs(Exp1_R25_pept)
#' conds <- Biobase::pData(Exp1_R25_pept)$Condition
#' objAfter <- wrapper.normalizeD(obj=Exp1_R25_pept, method="QuantileCentering", conds = conds, type="within conditions")
#' compareNormalizationD(qDataBefore, Biobase::exprs(objAfter), conds)
#'  
#' @importFrom RColorBrewer brewer.pal
#' 
#' @export
#' 
compareNormalizationD <- function(qDataBefore,
                                  qDataAfter,
                                  condsForLegend=NULL,
                                  indData2Show=NULL,
                                  palette = NULL){
  
  if (is.null(condsForLegend)) return(NULL)
  if (is.null(indData2Show)) {indData2Show <- c(1:ncol(qDataAfter)) }
  
  if (is.null(palette)){
    tmp <- RColorBrewer::brewer.pal(length(unique(condsForLegend)),"Dark2")[1:length(unique(condsForLegend))]
    
    for (i in 1:ncol(qDataBefore)){
      palette[i] <- tmp[ which(condsForLegend[i] == unique(condsForLegend))]
    }
    
  }else{
    if (length(palette) != ncol(qDataBefore)){
      warning("The color palette has not the same dimension as the number of samples")
      return(NULL)
    }
  }
  
  x <- qDataBefore
  y <- qDataAfter/qDataBefore
  
  lim.x <- range(min(x, na.rm=TRUE), max(x, na.rm=TRUE))
  lim.y <- range(min(y, na.rm=TRUE), max(y, na.rm=TRUE))
  
  
  ##Colors definition
  legendColor <- unique(palette)
  txtLegend <- unique(condsForLegend)
  
  
  
  plot(x=NULL
       ,xlim = lim.x
       ,ylim = lim.y
       , cex = 1
       , axes=TRUE
       , xlab = "Intensities before normalization"
       , ylab = "Intensities after normalization / Intensities before 
    normalization"
       ,cex.lab = 1
       ,cex.axis = 1
       ,cex.main = 3)
  
  
  for (i in indData2Show){
    points(x[,i], y[,i], col = palette[i], cex = 1,pch=16)
  }
  
  legend("topleft"
         , legend = txtLegend
         , col = legendColor
         , pch = 15 
         , bty = "n"
         , pt.cex = 2
         , cex = 1
         , horiz = FALSE
         , inset=c(0,0)
  )
  
  
}
Plot to compare the quantitative proteomics data before and after 
normalization using the library \code{highcharter}
}
\examples{
utils::data(Exp1_R25_prot, package='DAPARdata')
obj <- Exp1_R25_prot
qDataBefore <- Biobase::exprs(obj)
conds <- Biobase::pData(obj)[,"Condition"]
objAfter <- wrapper.normalizeD(obj, method = "QuantileCentering", conds =conds, type = "within conditions")
compareNormalizationD_HC(qDataBefore=qDataBefore, qDataAfter=Biobase::exprs(objAfter), conds=conds, n=100)
pal <- ExtendPalette(2, "Dark2")
compareNormalizationD_HC(qDataBefore=qDataBefore, qDataAfter=Biobase::exprs(objAfter), conds=conds, n=100, palette=pal)
 
}
\author{
Samuel Wieczorek
}
