% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plots_CV_dist.R
\name{CVDistD_HC}
\alias{CVDistD_HC}
\title{Distribution of CV of entities}
\usage{
CVDistD_HC(qData, conds = NULL, palette = NULL)
}
\arguments{
\item{qData}{A dataframe that contains quantitative data.}

\item{conds}{A vector of the conditions (one condition per sample).}

\item{palette}{xxx}
}
\value{
A density plot
}
\description{
#' Builds a densityplot of the CV of entities in the exprs() table
#' of a object. The CV is calculated for each condition present
#' in the dataset (see the slot \code{'Condition'} in the \code{pData()} table)
#' 
#' @title Distribution of CV of entities
#' @param qData A dataframe that contains quantitative data.
#' @param conds A vector of the conditions (one condition per sample).
#' @param palette xxx
#' @return A density plot
#' @author Florence Combes, Samuel Wieczorek
#' @seealso \code{\link{densityPlotD}}.
#' @examples
#' utils::data(Exp1_R25_pept, package='DAPARdata')
#' conds <- Biobase::pData(Exp1_R25_pept)[,"Condition"]
#' CVDistD(Biobase::exprs(Exp1_R25_pept), conds)
#' @importFrom RColorBrewer brewer.pal
#' @export
CVDistD <- function(qData, conds=NULL, palette = NULL){
  
  if (is.null(conds)) {return(NULL)}
  if (is.null(palette)){
    palette <- RColorBrewer::brewer.pal(length(unique(conds)),"Dark2")[1:length(unique(conds))]
  }else{
    if (length(palette) != ncol(qData)){
      warning("The color palette has not the same dimension as the number of samples")
      return(NULL)
    }
  }
  
  conditions <- unique(conds)
  n <- length(conditions)
  axis.limits <- matrix(data = 0, nrow = 4, ncol = n)
  for (i in conditions){
    if (length(which(conds == i)) > 1){
      t <- density(apply(qData[,which(conds == i)], 1, 
                         function(x) 100*var(x, na.rm=TRUE)/mean(x, na.rm=TRUE)), 
                   na.rm=TRUE)
      
      axis.limits[,which(conditions == i)]<- c(min(t$x), max(t$x), min(t$y),max(t$y))
    }
  }
  
  lim.x <- range(min(axis.limits[1,]), max(axis.limits[2,]))
  lim.y <- range(min(axis.limits[3,]), max(axis.limits[4,]))
  
  #par(mar = c(5, 5, 6, 3))
  plot(x = NULL
       , ylab ="Density"
       , xlab = "CV( log (intensity) )"
       , xlim = lim.x
       , ylim = lim.y
       , las=1
  )
  
  # density by condition
  conditions <- unique(conds)
  col.density = c(1:length(conditions))
  for (i in conditions){
    if (length(which(conds == i)) > 1){
      t <- apply(qData[,which(conds == i)], 1, 
                 function(x) 100*var(x, na.rm=TRUE)/mean(x, na.rm=TRUE))
      lines(density(t, na.rm = TRUE)
            , xlab=""
            , ylab=""
            , col=col.density[which(conditions == i)]
      )
    }
  }
  
  legend("topright"         
         , legend = conditions
         , col = col.density
         , pch = 15
         , bty = "n"
         , pt.cex = 2
         , cex = 1
         , horiz = FALSE
         , inset = c(0,0)
  )
  
}
Builds a densityplot of the CV of entities in the exprs() table
of a object. The CV is calculated for each condition present
in the dataset (see the slot \code{'Condition'} in the \code{pData()} table)
}
\examples{
utils::data(Exp1_R25_pept, package='DAPARdata')
conds <- Biobase::pData(Exp1_R25_pept)[,"Condition"]
CVDistD_HC(Biobase::exprs(Exp1_R25_pept), conds)
}
\seealso{
\code{\link{densityPlotD}}.
}
\author{
Samuel Wieczorek
}
