% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/metacell.R
\name{Set_POV_MEC_tags}
\alias{Set_POV_MEC_tags}
\title{Sets the MEC tag in the metacell}
\usage{
Set_POV_MEC_tags(conds, df, level)
}
\arguments{
\item{conds}{xxx}

\item{df}{An object of class \code{MSnSet}}

\item{level}{Type of entity/pipeline}
}
\value{
An instance of class \code{MSnSet}.
}
\description{
This function is based on the metacell dataframe to look for either missing
values (used to update an initial dataset) or imputed values (used when
post processing protein metacell after aggregation)
}
\details{
#' Sets the MEC tag in the metacell
#' 
#' @title Sets the MEC tag in the metacell
#' 
#' @param qdata xxx
#' 
#' @param conds xxx
#' 
#' @param df An object of class \code{MSnSet}
#' 
#' @param level Type of entity/pipeline
#' 
#' @return An instance of class \code{MSnSet}.
#' 
#' @author Samuel Wieczorek
#' 
#' @examples 
#' utils::data(Exp1_R25_pept, package='DAPARdata')
#' cols.for.ident <- xxxxx
#' df <- Biobase::fData(obj)[, cols.for.ident]
#' setMEC(df, Exp1_R25_pept, level = 'peptide')
#' 
#' @export
#' 
#' @importFrom Biobase pData exprs fData
#'  
setMEC <- function(qdata, conds, df, level){
  
  conditions <- unique(conds)
  nbCond <- length(conditions)
  
  for (cond in 1:nbCond){
    ind <- which(conds == conditions[cond])
    
    if (length(ind) == 1)
      lNA <- which(is.na(qdata[,ind]))
    else
      lNA <- which(apply(is.na(qdata[,ind]), 1, sum)==length(ind))
    
    if (length(lNA) > 0)
      df[lNA, ind] <- metacell.def(level)['missing_MEC']
  }
  return(df)
}
}
\examples{
utils::data(Exp1_R25_pept, package='DAPARdata')
obj <- Exp1_R25_pept[1:10]
cols.for.ident <- obj@experimentData@other$names_metacell
conds <- Biobase::pData(obj)$Condition
df <- Biobase::fData(obj)[, cols.for.ident]
Set_POV_MEC_tags(conds, df, level = 'peptide')

}
\author{
Samuel Wieczorek
}
